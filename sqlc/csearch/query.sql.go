// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package csearch

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const insertBill = `-- name: InsertBill :one
INSERT INTO bills (billid, billnumber, billtype, introducedat, congress, summary, actions, sponsors, cosponsors, statusat, shorttitle, officialtitle
    ) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) ON CONFLICT DO UPDATE SET summary=excluded.summary, actions=excluded.actions, sponsors=excluded.sponsors, cosponsors=excluded.cosponsors, statusat=excluded.statusat, shorttitle=excluded.shorttitle, officialtitle=excluded.officialtitle
WHERE statusat IS DISTINCT FROM excluded.statusat
  RETURNING billid, billnumber, billtype, introducedat, congress, summary, actions, sponsors, cosponsors, statusat, shorttitle, officialtitle, s_ts, hr_ts, hconres_ts, hjres_ts, hres_ts, sconres_ts, sjres_ts, sres_ts
`

type InsertBillParams struct {
	Billid        sql.NullString
	Billnumber    string
	Billtype      string
	Introducedat  sql.NullString
	Congress      string
	Summary       pgtype.JSONB
	Actions       pgtype.JSONB
	Sponsors      pgtype.JSONB
	Cosponsors    pgtype.JSONB
	Statusat      sql.NullString
	Shorttitle    sql.NullString
	Officialtitle sql.NullString
}

func (q *Queries) InsertBill(ctx context.Context, arg InsertBillParams) (Bill, error) {
	row := q.db.QueryRow(ctx, insertBill,
		arg.Billid,
		arg.Billnumber,
		arg.Billtype,
		arg.Introducedat,
		arg.Congress,
		arg.Summary,
		arg.Actions,
		arg.Sponsors,
		arg.Cosponsors,
		arg.Statusat,
		arg.Shorttitle,
		arg.Officialtitle,
	)
	var i Bill
	err := row.Scan(
		&i.Billid,
		&i.Billnumber,
		&i.Billtype,
		&i.Introducedat,
		&i.Congress,
		&i.Summary,
		&i.Actions,
		&i.Sponsors,
		&i.Cosponsors,
		&i.Statusat,
		&i.Shorttitle,
		&i.Officialtitle,
		&i.STs,
		&i.HrTs,
		&i.HconresTs,
		&i.HjresTs,
		&i.HresTs,
		&i.SconresTs,
		&i.SjresTs,
		&i.SresTs,
	)
	return i, err
}
