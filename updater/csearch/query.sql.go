// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package csearch

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const insertBill = `-- name: InsertBill :exec
INSERT INTO bills (billid, billnumber, billtype, introducedat, congress, summary, actions, sponsors, cosponsors, statusat, shorttitle, officialtitle
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
         ) ON CONFLICT ON CONSTRAINT bill_pkey DO UPDATE SET summary=excluded.summary, actions=excluded.actions, sponsors=excluded.sponsors, cosponsors=excluded.cosponsors, statusat=excluded.statusat, shorttitle=excluded.shorttitle, officialtitle=excluded.officialtitle
WHERE bills.statusat IS DISTINCT FROM excluded.statusat
`

type InsertBillParams struct {
	Billid        sql.NullString
	Billnumber    string
	Billtype      string
	Introducedat  sql.NullString
	Congress      string
	Summary       pqtype.NullRawMessage
	Actions       pqtype.NullRawMessage
	Sponsors      pqtype.NullRawMessage
	Cosponsors    pqtype.NullRawMessage
	Statusat      string
	Shorttitle    sql.NullString
	Officialtitle sql.NullString
}

func (q *Queries) InsertBill(ctx context.Context, arg InsertBillParams) error {
	_, err := q.db.ExecContext(ctx, insertBill,
		arg.Billid,
		arg.Billnumber,
		arg.Billtype,
		arg.Introducedat,
		arg.Congress,
		arg.Summary,
		arg.Actions,
		arg.Sponsors,
		arg.Cosponsors,
		arg.Statusat,
		arg.Shorttitle,
		arg.Officialtitle,
	)
	return err
}

const insertVote = `-- name: InsertVote :exec
INSERT INTO votes (
    bill,
    congress,
    chamber,
    votenumber,
    votedate,
    votesession,
    question,
    result,
    yea,
    nay,
    present,
    notvoting,
    source_url,
    votetype,
    voteid) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15 
         ) ON CONFLICT DO NOTHING
`

type InsertVoteParams struct {
	Bill        pqtype.NullRawMessage
	Congress    sql.NullString
	Chamber     sql.NullString
	Votenumber  sql.NullString
	Votedate    sql.NullString
	Votesession sql.NullString
	Question    sql.NullString
	Result      sql.NullString
	Yea         pqtype.NullRawMessage
	Nay         pqtype.NullRawMessage
	Present     pqtype.NullRawMessage
	Notvoting   pqtype.NullRawMessage
	SourceUrl   sql.NullString
	Votetype    sql.NullString
	Voteid      string
}

func (q *Queries) InsertVote(ctx context.Context, arg InsertVoteParams) error {
	_, err := q.db.ExecContext(ctx, insertVote,
		arg.Bill,
		arg.Congress,
		arg.Chamber,
		arg.Votenumber,
		arg.Votedate,
		arg.Votesession,
		arg.Question,
		arg.Result,
		arg.Yea,
		arg.Nay,
		arg.Present,
		arg.Notvoting,
		arg.SourceUrl,
		arg.Votetype,
		arg.Voteid,
	)
	return err
}
